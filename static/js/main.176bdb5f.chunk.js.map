{"version":3,"sources":["components/GoodList.jsx","App.jsx","index.jsx"],"names":["GoodList","goods","map","good","goodsFromServer","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","isReverse","copyGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","activeBtn","notActiveBtn","className","type","onClick","prev","ReactDOM","render","document","getElementById"],"mappings":"iOAAaA,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtB,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,SCEjBC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAsB,iBACtBC,EAAoB,SAyBnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA1BR,SAA0BZ,EAAOQ,EAAWK,GAC1C,IAAMC,EAAS,YAAOd,GAmBtB,OAjBIQ,GACFM,EAAUC,MAAK,SAACC,EAAOC,GACrB,OAAQT,GACN,KAAKJ,EACH,OAAOY,EAAME,cAAcD,GAC7B,KAAKZ,EACH,OAAOW,EAAMG,OAASF,EAAME,OAC9B,QACE,OAAO,MAKXN,GACFC,EAAUM,UAGLN,EAMcO,CAAiBlB,EAAiBK,EAAWE,GAC5DY,EAAY,oBACZC,EAAe,6BAWrB,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,UAAKhB,IAAcJ,EAAsBmB,EAAeD,GACjEI,QAAS,kBAAMjB,EAAaL,IAH9B,iCAQA,wBACEqB,KAAK,SACLD,UAAS,UAAKhB,IAAcH,EAAoBkB,EAAeD,GAC/DI,QAAS,kBAAMjB,EAAaJ,IAH9B,4BAQA,wBACEoB,KAAK,SACLD,UAAS,UAAMd,EAA4BY,EAAfC,GAC5BG,QA/BmB,WACzBf,GAAc,SAAAgB,GAAI,OAAKA,MA2BnB,sBAQgB,KAAdnB,GAAoBE,IACpB,wBACEe,KAAK,SACLD,UAAWD,EACXG,QApCc,WACtBjB,EAAa,IACbE,GAAc,IA+BR,sBAWJ,cAAC,EAAD,CAAUX,MAAOY,QChGvBgB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.176bdb5f.chunk.js","sourcesContent":["export const GoodList = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <li data-cy=\"Good\" key={good}>{good}</li>\n    ))}\n  </ul>\n);\n","import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport { GoodList } from './components/GoodList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABET = 'alphabetically';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, sortField, isReverse) {\n  const copyGoods = [...goods];\n\n  if (sortField) {\n    copyGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverse) {\n    copyGoods.reverse();\n  }\n\n  return copyGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, isReversed);\n  const activeBtn = 'button is-success';\n  const notActiveBtn = 'button is-success is-light';\n\n  const handleReverseClick = () => {\n    setIsReversed(prev => !prev);\n  };\n\n  const handleSortClick = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`${sortField !== SORT_FIELD_ALPHABET ? notActiveBtn : activeBtn}`}\n          onClick={() => setSortField(SORT_FIELD_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`${sortField !== SORT_FIELD_LENGTH ? notActiveBtn : activeBtn}`}\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`${!isReversed ? notActiveBtn : activeBtn}`}\n          onClick={handleReverseClick}\n        >\n          Reverse\n        </button>\n\n        {(sortField !== '' || isReversed) && (\n          <button\n            type=\"button\"\n            className={notActiveBtn}\n            onClick={handleSortClick}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <GoodList goods={visibleGoods} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}